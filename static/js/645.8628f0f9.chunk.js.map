{"version":3,"file":"static/js/645.8628f0f9.chunk.js","mappings":"wMAAMA,EAAM,+BACNC,EAAM,mCACCC,EAAY,kCAAlB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAqCA,IAAMC,EAAM,CACVC,kBA/BF,SAA2BC,GACzB,OAAOZ,EAAuB,GAAD,OACxBH,EADwB,iCACIC,EADJ,kBACiBc,EADjB,gDA+B7BC,oBA1BF,SAA6BC,GAC3B,OAAOd,EAAuB,GAAD,OACxBH,EADwB,uCACUC,EADV,iBACsBgB,KAyBnDC,kBArBF,SAA2BC,GACzB,OAAOhB,EAAuB,GAAD,OACxBH,EADwB,kBACXmB,EADW,oBACGlB,EADH,qBAqB7BmB,kBAhBF,SAA2BD,GACzB,OAAOhB,EAAuB,GAAD,OACxBH,EADwB,kBACXmB,EADW,4BACWlB,EADX,qBAgB7BoB,kBAXF,SAA2BF,GACzB,OAAOhB,EAAuB,GAAD,OACxBH,EADwB,kBACXmB,EADW,4BACWlB,EADX,6BAa/B,O,0MC/CaqB,EAAYC,EAAAA,EAAAA,EAAH,kEAITC,EAAOD,EAAAA,EAAAA,EAAH,kH,SC6BjB,EA3BgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,GADiBC,EAAAA,EAAAA,MACQD,QAM/B,OAJAE,EAAAA,EAAAA,YAAU,WACRjB,EAAAA,EAAAA,kBAAsBe,GAASG,MAAK,SAACC,GAAD,OAAWL,EAAWK,EAAMC,cAC/D,CAACL,KAGF,8BACGF,EAAQQ,OAAS,GAChB,wBACGR,EAAQS,KAAI,SAACC,EAAQC,GAAT,OACX,2BACE,SAACb,EAAD,UAAOY,EAAOE,UACd,SAACd,EAAD,UAAOY,EAAOG,YAFPF,SAOb,SAACf,EAAD","sources":["services/Api.js","views/Reviews/Reviews.styled.js","views/Reviews/Reviews.js"],"sourcesContent":["const URL = \"https://api.themoviedb.org/3\";\r\nconst KEY = \"4f78e0fa15d03d6a74908fc8e459b884\";\r\nexport const IMAGE_URL = \"https://image.tmdb.org/t/p/w500\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nfunction fetchSearchMovies(name) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}/search/movie?api_key=${KEY}&query=${name}&language=en-US&page=1&include_adult=false`\r\n  );\r\n}\r\n\r\nfunction fetchTrendingMovies(currentPage) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}/trending/movie/day?api_key=${KEY}&page=${currentPage}`\r\n  );\r\n}\r\n\r\nfunction fetchMovieDetails(id) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}/movie/${id}?api_key=${KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nfunction fetchMovieCredits(id) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}/movie/${id}/credits?api_key=${KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nfunction fetchMovieReviews(id) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\r\n  );\r\n}\r\n\r\nconst Api = {\r\n  fetchSearchMovies,\r\n  fetchTrendingMovies,\r\n  fetchMovieDetails,\r\n  fetchMovieCredits,\r\n  fetchMovieReviews,\r\n};\r\n\r\nexport default Api;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const NoReviews = styled.p`\r\n  margin: 20px 27px;\r\n  fron-size: 18px;\r\n`;\r\nexport const Text = styled.p`\r\n  margin: 20px 27px;\r\n  font-size: 18px;\r\n  letter-spacing: 1px;\r\n  text-align: justify;\r\n`;\r\n","// информация об обзорах\r\n// Рендерится на странице < MovieDetailsPage >\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Api from \"../../services\";\r\nimport { NoReviews, Text } from \"./Reviews.styled\";\r\n\r\nconst Reviews = () => {\r\n  const [reviews, setReviews] = useState([]);\r\n  const currentMovieId = useParams();\r\n  const movieId = currentMovieId.movieId;\r\n\r\n  useEffect(() => {\r\n    Api.fetchMovieReviews(movieId).then((movie) => setReviews(movie.results));\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {reviews.length > 0 ? (\r\n        <ul>\r\n          {reviews.map((review, index) => (\r\n            <li key={index}>\r\n              <Text>{review.author}</Text>\r\n              <Text>{review.content}</Text>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <NoReviews>We don't have any reviews for this movie.</NoReviews>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n"],"names":["URL","KEY","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","Api","fetchSearchMovies","name","fetchTrendingMovies","currentPage","fetchMovieDetails","id","fetchMovieCredits","fetchMovieReviews","NoReviews","styled","Text","useState","reviews","setReviews","movieId","useParams","useEffect","then","movie","results","length","map","review","index","author","content"],"sourceRoot":""}